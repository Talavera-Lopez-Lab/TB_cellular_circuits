for (i in 1:length(object.list)) {
netVisual_circle(object.list[[i]]@net$count, weight.scale = T, label.edge= F, edge.weight.max = weight.max[2], edge.width.max = 12, title.name = paste0("Number of interactions - ", names(object.list)[i]))
}
### Compare the total number of interactions and interaction strength
gg1 <- compareInteractions(cellchat, show.legend = F, group = c(1,2))
gg2 <- compareInteractions(cellchat, show.legend = F, group = c(1,2), measure = "weight")
gg1 + gg2
weight.max <- getMaxWeight(object.list, attribute = c("idents","count"))
par(mfrow = c(2,2), xpd=TRUE)
for (i in 1:length(object.list)) {
netVisual_circle(object.list[[i]]@net$count, weight.scale = T, label.edge= F, edge.weight.max = weight.max[2], edge.width.max = 12, title.name = paste0("Number of interactions - ", names(object.list)[i]))
}
num.link <- sapply(object.list, function(x) {rowSums(x@net$count) + colSums(x@net$count)-diag(x@net$count)})
weight.MinMax <- c(min(num.link), max(num.link)) # control the dot size in the different datasets
num.link <- sapply(object.list, function(x) {rowSums(x@net$count) + colSums(x@net$count)-diag(x@net$count)})
weight.MinMax <- c(min(num.link), max(num.link)) # control the dot size in the different datasets
gg <- list()
for (i in 1:length(object.list)) {
gg[[i]] <- netAnalysis_signalingRole_scatter(object.list[[i]], title = names(object.list)[i], weight.MinMax = weight.MinMax)
}
weight.MinMax <- c(min(num.link), max(num.link)) # control the dot size in the different datasets
num.link
cellchat <- computeNetSimilarityPairwise(cellchat, type = "functional")
rankSimilarity(cellchat, type = "functional")
gg1 <- rankNet(cellchat, mode = "comparison", stacked = T, do.stat = TRUE)
gg2 <- rankNet(cellchat, mode = "comparison", stacked = F, do.stat = TRUE)
gg1 + gg2
gg1 <- rankNet(cellchat, mode = "comparison", stacked = T, do.stat = TRUE)
gg2 <- rankNet(cellchat, mode = "comparison", stacked = F, do.stat = TRUE)
gg3 <- rankNet(cellchat, mode = "comparison", stacked = F, do.stat = TRUE)
gg1 + gg2 + gg3
gg1 <- rankNet(cellchat, mode = "comparison", stacked = T, do.stat = TRUE)
gg2 <- rankNet(cellchat, mode = "comparison", stacked = T, do.stat = TRUE)
gg1 + gg2
gg1 <- rankNet(cellchat, mode = "comparison", stacked = T, do.stat = TRUE)
gg2 <- rankNet(cellchat, mode = "comparison", stacked = F, do.stat = TRUE)
gg3 <- rankNet(cellchat, mode = "comparison", stacked = T, do.stat = TRUE)
gg1 + gg2 + gg3
ibrary(ComplexHeatmap)
library(ComplexHeatmap)
#> Loading required package: grid
#> ========================================
#> ComplexHeatmap version 2.10.0
#> Bioconductor page: http://bioconductor.org/packages/ComplexHeatmap/
#> Github page: https://github.com/jokergoo/ComplexHeatmap
#> Documentation: http://jokergoo.github.io/ComplexHeatmap-reference
#>
#> If you use it in published research, please cite:
#> Gu, Z. Complex heatmaps reveal patterns and correlations in multidimensional
#>   genomic data. Bioinformatics 2016.
#>
#> The new InteractiveComplexHeatmap package can directly export static
#> complex heatmaps into an interactive Shiny app with zero effort. Have a try!
#>
#> This message can be suppressed by:
#>   suppressPackageStartupMessages(library(ComplexHeatmap))
#> ========================================
i = 1
# combining all the identified signaling pathways from different datasets
pathway.union <- union(object.list[[i]]@netP$pathways, object.list[[i+1]]@netP$pathways)
ht1 = netAnalysis_signalingRole_heatmap(object.list[[i]], pattern = "outgoing", signaling = pathway.union, title = names(object.list)[i], width = 5, height = 6)
ht2 = netAnalysis_signalingRole_heatmap(object.list[[i+1]], pattern = "outgoing", signaling = pathway.union, title = names(object.list)[i+1], width = 5, height = 6)
draw(ht1 + ht2, ht_gap = unit(0.5, "cm"))
library(ComplexHeatmap)
#> Loading required package: grid
#> ========================================
#> ComplexHeatmap version 2.10.0
#> Bioconductor page: http://bioconductor.org/packages/ComplexHeatmap/
#> Github page: https://github.com/jokergoo/ComplexHeatmap
#> Documentation: http://jokergoo.github.io/ComplexHeatmap-reference
#>
#> If you use it in published research, please cite:
#> Gu, Z. Complex heatmaps reveal patterns and correlations in multidimensional
#>   genomic data. Bioinformatics 2016.
#>
#> The new InteractiveComplexHeatmap package can directly export static
#> complex heatmaps into an interactive Shiny app with zero effort. Have a try!
#>
#> This message can be suppressed by:
#>   suppressPackageStartupMessages(library(ComplexHeatmap))
#> ========================================
i = 1
# combining all the identified signaling pathways from different datasets
pathway.union <- union(object.list[[i]]@netP$pathways, object.list[[i+1]]@netP$pathways)
ht1 = netAnalysis_signalingRole_heatmap(object.list[[i]], pattern = "outgoing", signaling = pathway.union, title = names(object.list)[i], width = 5, height = 6)
ht2 = netAnalysis_signalingRole_heatmap(object.list[[i+1]], pattern = "outgoing", signaling = pathway.union, title = names(object.list)[i+1], width = 5, height = 6)
ht3 = netAnalysis_signalingRole_heatmap(object.list[[i+2]], pattern = "outgoing", signaling = pathway.union, title = names(object.list)[i+2], width = 5, height = 6)
draw(ht1 + ht2 + ht3, ht_gap = unit(0.5, "cm"))
library(ComplexHeatmap)
#> Loading required package: grid
#> ========================================
#> ComplexHeatmap version 2.10.0
#> Bioconductor page: http://bioconductor.org/packages/ComplexHeatmap/
#> Github page: https://github.com/jokergoo/ComplexHeatmap
#> Documentation: http://jokergoo.github.io/ComplexHeatmap-reference
#>
#> If you use it in published research, please cite:
#> Gu, Z. Complex heatmaps reveal patterns and correlations in multidimensional
#>   genomic data. Bioinformatics 2016.
#>
#> The new InteractiveComplexHeatmap package can directly export static
#> complex heatmaps into an interactive Shiny app with zero effort. Have a try!
#>
#> This message can be suppressed by:
#>   suppressPackageStartupMessages(library(ComplexHeatmap))
#> ========================================
i = 1
# combining all the identified signaling pathways from different datasets
pathway.union <- union(object.list[[i]]@netP$pathways, object.list[[i+1]]@netP$pathways)
ht1 = netAnalysis_signalingRole_heatmap(object.list[[i]], pattern = "outgoing", signaling = pathway.union, title = names(object.list)[i], width = 5, height = 6)
ht2 = netAnalysis_signalingRole_heatmap(object.list[[i+1]], pattern = "outgoing", signaling = pathway.union, title = names(object.list)[i+1], width = 5, height = 6)
ht3 = netAnalysis_signalingRole_heatmap(object.list[[i+2]], pattern = "outgoing", signaling = pathway.union, title = names(object.list)[i+2], width = 5, height = 6)
ht4 = netAnalysis_signalingRole_heatmap(object.list[[i+3]], pattern = "outgoing", signaling = pathway.union, title = names(object.list)[i+3], width = 5, height = 6)
draw(ht1 + ht2 + ht3 + ht4, ht_gap = unit(0.5, "cm"))
library(ComplexHeatmap)
#> Loading required package: grid
#> ========================================
#> ComplexHeatmap version 2.10.0
#> Bioconductor page: http://bioconductor.org/packages/ComplexHeatmap/
#> Github page: https://github.com/jokergoo/ComplexHeatmap
#> Documentation: http://jokergoo.github.io/ComplexHeatmap-reference
#>
#> If you use it in published research, please cite:
#> Gu, Z. Complex heatmaps reveal patterns and correlations in multidimensional
#>   genomic data. Bioinformatics 2016.
#>
#> The new InteractiveComplexHeatmap package can directly export static
#> complex heatmaps into an interactive Shiny app with zero effort. Have a try!
#>
#> This message can be suppressed by:
#>   suppressPackageStartupMessages(library(ComplexHeatmap))
#> ========================================
i = 1
# combining all the identified signaling pathways from different datasets
pathway.union <- union(object.list[[i]]@netP$pathways, object.list[[i+1]]@netP$pathways)
ht1 = netAnalysis_signalingRole_heatmap(object.list[[i]], pattern = "outgoing", signaling = pathway.union, title = names(object.list)[i], width = 6, height = 8)
ht2 = netAnalysis_signalingRole_heatmap(object.list[[i+1]], pattern = "outgoing", signaling = pathway.union, title = names(object.list)[i+1], width = 6, height = 8)
ht3 = netAnalysis_signalingRole_heatmap(object.list[[i+2]], pattern = "outgoing", signaling = pathway.union, title = names(object.list)[i+2], width = 6, height = 8)
ht4 = netAnalysis_signalingRole_heatmap(object.list[[i+3]], pattern = "outgoing", signaling = pathway.union, title = names(object.list)[i+3], width = 6, height = 8)
draw(ht1 + ht2 + ht3 + ht4, ht_gap = unit(0.5, "cm"))
?draw
### Load required modules
library(NMF)
library(dplyr)
library(igraph)
library(Matrix)
library(ggplot2)
library(CellChat)
library(patchwork)
library(ggalluvial)
library(reticulate)
options(stringsAsFactors = FALSE)
### Read in data
ad <- import("anndata", convert = FALSE)
pd <- import("pandas", convert = FALSE)
ad_object <- ad$read_h5ad('/Users/carlos.lopez/INBOX/tb_circuits/cellchat_objects/CaiY_Healthy-PBMC_cellchat-ready.log.h5ad')
### Access expression matrix
data.input <- t(py_to_r(ad_object$X))
### Add metadata
rownames(data.input) <- rownames(py_to_r(ad_object$var))
colnames(data.input) <- rownames(py_to_r(ad_object$obs))
meta.data <- py_to_r(ad_object$obs)
meta <- meta.data
### Normalise data
#data.input <- normalizeData(data.input, scale.factor = 10000, do.log = TRUE)
### Create `cellchat` object
cellchat <- createCellChat(object = data.input, meta = meta, group.by = "cell_type")
### Set up ligand-receptor interaction database for `cellchat`
CellChatDB <- CellChatDB.human
showDatabaseCategory(CellChatDB)
dplyr::glimpse(CellChatDB$interaction)
CellChatDB.use <- CellChatDB
cellchat@DB <- CellChatDB.use
### Process expression data
cellchat <- subsetData(cellchat)
cellchat <- identifyOverExpressedGenes(cellchat)
cellchat <- identifyOverExpressedInteractions(cellchat)
cellchat <- projectData(cellchat, PPI.human)
cellchat <- computeCommunProb(cellchat, raw.use = TRUE)
cellchat <- filterCommunication(cellchat, min.cells = 3)
### Export results as dataframe
df.net <- subsetCommunication(cellchat)
head(df.net)
#write.table(df.net, sep = ',', row.names = FALSE, '/Users/carlostalavera-lopez/github/TB_cellular_circuits/5-cell_cell_interactions/results/CaiY_Healthy_PBMC_cellchat_net.csv')
### Infer cell-cell communication
cellchat <- computeCommunProbPathway(cellchat)
### Calculate aggregated cell-cell communication
cellchat <- aggregateNet(cellchat)
groupSize <- as.numeric(table(cellchat@idents))
par(mfrow = c(1,2), xpd = TRUE)
options(repr.plot.width = 40, repr.plot.height = 40)
netVisual_circle(cellchat@net$count, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Number of interactions")
netVisual_circle(cellchat@net$weight, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Interaction weights/strength")
mat <- cellchat@net$weight
par(mfrow = c(3,3), xpd=TRUE)
for (i in 1:nrow(mat)) {
mat2 <- matrix(0, nrow = nrow(mat), ncol = ncol(mat), dimnames = dimnames(mat))
mat2[i, ] <- mat[i, ]
netVisual_circle(mat2, vertex.weight = groupSize, weight.scale = T, edge.weight.max = max(mat), title.name = rownames(mat)[i])
}
unique(df.net$pathway_name)
options(repr.plot.width = 5, repr.plot.height = 5)
ht1 <- netAnalysis_signalingRole_heatmap(cellchat, pattern = "outgoing", width = 16, height = 20, color.heatmap = "YlGnBu")
options(repr.plot.width = 8, repr.plot.height = 10)
pathways.show <- c("CXCL")
#pathways.show <- c("CXCL")
netAnalysis_contribution(cellchat, signaling = pathways.show)
vertex.receiver = seq(1,4) # a numeric vector.
netVisual_aggregate(cellchat, signaling = pathways.show,  vertex.receiver = vertex.receiver)
par(mfrow=c(1,1))
netVisual_aggregate(cellchat, signaling = pathways.show, layout = "circle")
netVisual_aggregate(cellchat, signaling = pathways.show, layout = "chord")
cellchat <- netAnalysis_computeCentrality(cellchat, slot.name = "netP")
options(repr.plot.width = 5, repr.plot.height = 5)
ht1 <- netAnalysis_signalingRole_heatmap(cellchat, pattern = "outgoing", width = 16, height = 20, color.heatmap = "YlGnBu")
ht2 <- netAnalysis_signalingRole_heatmap(cellchat, pattern = "incoming", width = 16, height = 20, color.heatmap = "YlGnBu")
ht1 + ht2
options(repr.plot.width = 10, repr.plot.height = 10)
gg1 <- netAnalysis_signalingRole_scatter(cellchat)
gg2 <- netAnalysis_signalingRole_scatter(cellchat, signaling = c("PARs", "MHC-I"))
gg1 + gg2
### Identify global communication patterns
selectK(cellchat, pattern = "outgoing")
options(repr.plot.width = 15, repr.plot.height = 15)
nPatterns = 5
cellchat <- identifyCommunicationPatterns(cellchat, pattern = "outgoing", k = nPatterns,  width = 10, height = 10)
### Identify global communication patterns
selectK(cellchat, pattern = "incoming")
options(repr.plot.width = 15, repr.plot.height = 15)
nPatterns = 5
cellchat <- identifyCommunicationPatterns(cellchat, pattern = "incoming", k = nPatterns,  width = 10, height = 10)
### Sankey plot for outgoing
options(repr.plot.width = 40, repr.plot.height = 22.5)
netAnalysis_river(cellchat, pattern = "outgoing", font.size = 2.5, font.size.title = 20)
netAnalysis_dot(cellchat, pattern = "outgoing")
pairLR.pathway <- extractEnrichedLR(cellchat, signaling = pathways.show, geneLR.return = FALSE)
LR.show <- pairLR.pathway[1,] # show one ligand-receptor pair
netAnalysis_dot(cellchat, pattern = "outgoing")
netAnalysis_river(cellchat, pattern = "outgoing", font.size = 2.5, font.size.title = 20)
### Sankey plot for incoming
options(repr.plot.width = 40, repr.plot.height = 22.5)
netAnalysis_river(cellchat, pattern = "incoming", font.size = 2.5, font.size.title = 20)
netAnalysis_dot(cellchat, pattern = "incoming")
pairLR.pathway <- extractEnrichedLR(cellchat, signaling = pathways.show, geneLR.return = FALSE)
LR.show <- pairLR.pathway[1,] # show one ligand-receptor pair
vertex.receiver = seq(1,4)
netVisual_individual(cellchat, signaling = pathways.show, pairLR.use = LR.show, layout = "chord")
plotGeneExpression(cellchat, signaling = "CCL")
install.packages("Seurat")
library(Seurat)
plotGeneExpression(cellchat, signaling = "CCL")
plotGeneExpression(cellchat, signaling = "PARs")
options(repr.plot.width = 8, repr.plot.height = 10)
pathways.show <- c("ANNEXIN")
#pathways.show <- c("CXCL")
netAnalysis_contribution(cellchat, signaling = pathways.show)
vertex.receiver = seq(1,4) # a numeric vector.
netVisual_aggregate(cellchat, signaling = pathways.show,  vertex.receiver = vertex.receiver)
par(mfrow=c(1,1))
netVisual_aggregate(cellchat, signaling = pathways.show, layout = "circle")
netVisual_aggregate(cellchat, signaling = pathways.show, layout = "chord")
options(repr.plot.width = 5, repr.plot.height = 5)
ht1 <- netAnalysis_signalingRole_heatmap(cellchat, pattern = "outgoing", width = 16, height = 20, color.heatmap = "YlGnBu")
ht2 <- netAnalysis_signalingRole_heatmap(cellchat, pattern = "incoming", width = 16, height = 20, color.heatmap = "YlGnBu")
ht1 + ht2
options(repr.plot.width = 8, repr.plot.height = 10)
pathways.show <- c("CLEC")
#pathways.show <- c("CXCL")
netAnalysis_contribution(cellchat, signaling = pathways.show)
vertex.receiver = seq(1,4) # a numeric vector.
netVisual_aggregate(cellchat, signaling = pathways.show,  vertex.receiver = vertex.receiver)
par(mfrow=c(1,1))
netVisual_aggregate(cellchat, signaling = pathways.show, layout = "circle")
netVisual_aggregate(cellchat, signaling = pathways.show, layout = "chord")
### Load required modules
library(NMF)
library(dplyr)
library(igraph)
library(Matrix)
library(ggplot2)
library(CellChat)
library(patchwork)
library(ggalluvial)
library(reticulate)
options(stringsAsFactors = FALSE)
### Read in data
ad <- import("anndata", convert = FALSE)
pd <- import("pandas", convert = FALSE)
ad_object <- ad$read_h5ad('/Users/carlos.lopez/INBOX/tb_circuits/cellchat_objects/CaiY_activeTB-PBMC_cellchat-ready.log.h5ad')
### Access expression matrix
data.input <- t(py_to_r(ad_object$X))
### Add metadata
rownames(data.input) <- rownames(py_to_r(ad_object$var))
colnames(data.input) <- rownames(py_to_r(ad_object$obs))
meta.data <- py_to_r(ad_object$obs)
meta <- meta.data
### Create `cellchat` object
cellchat <- createCellChat(object = data.input, meta = meta, group.by = "cell_type")
### Set up ligand-receptor interaction database for `cellchat`
CellChatDB <- CellChatDB.human
showDatabaseCategory(CellChatDB)
dplyr::glimpse(CellChatDB$interaction)
CellChatDB.use <- CellChatDB
cellchat@DB <- CellChatDB.use
### Process expression data
cellchat <- subsetData(cellchat)
cellchat <- identifyOverExpressedGenes(cellchat)
cellchat <- identifyOverExpressedInteractions(cellchat)
cellchat <- projectData(cellchat, PPI.human)
cellchat <- computeCommunProb(cellchat, raw.use = TRUE)
cellchat <- filterCommunication(cellchat, min.cells = 3)
### Export results as dataframe
df.net <- subsetCommunication(cellchat)
head(df.net)
#write.table(df.net, sep = ',', row.names = FALSE, '/Users/carlostalavera-lopez/github/TB_cellular_circuits/5-cell_cell_interactions/results/CaiY_activeTB_PBMC_cellchat_net.csv')
### Infer cell-cell communication
cellchat <- computeCommunProbPathway(cellchat)
### Calculate aggregated cell-cell communication
cellchat <- aggregateNet(cellchat)
groupSize <- as.numeric(table(cellchat@idents))
par(mfrow = c(1,2), xpd = TRUE)
options(repr.plot.width = 40, repr.plot.height = 40)
netVisual_circle(cellchat@net$count, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Number of interactions")
netVisual_circle(cellchat@net$weight, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Interaction weights/strength")
mat <- cellchat@net$weight
par(mfrow = c(3,3), xpd=TRUE)
for (i in 1:nrow(mat)) {
mat2 <- matrix(0, nrow = nrow(mat), ncol = ncol(mat), dimnames = dimnames(mat))
mat2[i, ] <- mat[i, ]
netVisual_circle(mat2, vertex.weight = groupSize, weight.scale = T, edge.weight.max = max(mat), title.name = rownames(mat)[i])
}
unique(df.net$pathway_name)
options(repr.plot.width = 8, repr.plot.height = 10)
pathways.show <- c("ANNEXIN")
#pathways.show <- c("CXCL")
netAnalysis_contribution(cellchat, signaling = pathways.show)
vertex.receiver = seq(1,4) # a numeric vector.
netVisual_aggregate(cellchat, signaling = pathways.show,  vertex.receiver = vertex.receiver)
par(mfrow=c(1,1))
netVisual_aggregate(cellchat, signaling = pathways.show, layout = "circle")
netVisual_aggregate(cellchat, signaling = pathways.show, layout = "chord")
cellchat <- netAnalysis_computeCentrality(cellchat, slot.name = "netP")
options(repr.plot.width = 5, repr.plot.height = 5)
ht1 <- netAnalysis_signalingRole_heatmap(cellchat, pattern = "outgoing", width = 16, height = 20, color.heatmap = "YlGnBu")
ht2 <- netAnalysis_signalingRole_heatmap(cellchat, pattern = "incoming", width = 16, height = 20, color.heatmap = "YlGnBu")
ht1 + ht2
options(repr.plot.width = 10, repr.plot.height = 10)
gg1 <- netAnalysis_signalingRole_scatter(cellchat)
gg2 <- netAnalysis_signalingRole_scatter(cellchat, signaling = c("PARs", "MHC-I"))
gg1 + gg2
### Identify global communication patterns
selectK(cellchat, pattern = "outgoing")
options(repr.plot.width = 15, repr.plot.height = 15)
nPatterns = 5
cellchat <- identifyCommunicationPatterns(cellchat, pattern = "outgoing", k = nPatterns,  width = 10, height = 10)
### Identify global communication patterns
selectK(cellchat, pattern = "incoming")
options(repr.plot.width = 15, repr.plot.height = 15)
nPatterns = 5
cellchat <- identifyCommunicationPatterns(cellchat, pattern = "incoming", k = nPatterns,  width = 10, height = 10)
### Sankey plot for outgoing
options(repr.plot.width = 40, repr.plot.height = 22.5)
netAnalysis_river(cellchat, pattern = "outgoing", font.size = 2.5, font.size.title = 20)
netAnalysis_dot(cellchat, pattern = "outgoing")
pairLR.pathway <- extractEnrichedLR(cellchat, signaling = pathways.show, geneLR.return = FALSE)
LR.show <- pairLR.pathway[1,] # show one ligand-receptor pair
### Sankey plot for incoming
options(repr.plot.width = 40, repr.plot.height = 22.5)
netAnalysis_river(cellchat, pattern = "incoming", font.size = 2.5, font.size.title = 20)
netAnalysis_dot(cellchat, pattern = "incoming")
pairLR.pathway <- extractEnrichedLR(cellchat, signaling = pathways.show, geneLR.return = FALSE)
LR.show <- pairLR.pathway[1,] # show one ligand-receptor pair
# Hierarchy plot
vertex.receiver = seq(1,4)
netVisual_individual(cellchat, signaling = pathways.show, pairLR.use = LR.show, layout = "chord")
plotGeneExpression(cellchat, signaling = "CCL")
options(repr.plot.width = 8, repr.plot.height = 10)
pathways.show <- c("ANNEXIN")
#pathways.show <- c("CXCL")
netAnalysis_contribution(cellchat, signaling = pathways.show)
vertex.receiver = seq(1,4) # a numeric vector.
netVisual_aggregate(cellchat, signaling = pathways.show,  vertex.receiver = vertex.receiver)
par(mfrow=c(1,1))
netVisual_aggregate(cellchat, signaling = pathways.show, layout = "circle")
netVisual_aggregate(cellchat, signaling = pathways.show, layout = "chord")
options(repr.plot.width = 8, repr.plot.height = 10)
pathways.show <- c("CLEC")
#pathways.show <- c("CXCL")
netAnalysis_contribution(cellchat, signaling = pathways.show)
vertex.receiver = seq(1,4) # a numeric vector.
netVisual_aggregate(cellchat, signaling = pathways.show,  vertex.receiver = vertex.receiver)
par(mfrow=c(1,1))
netVisual_aggregate(cellchat, signaling = pathways.show, layout = "circle")
netVisual_aggregate(cellchat, signaling = pathways.show, layout = "chord")
### Load required modules
library(NMF)
library(dplyr)
library(igraph)
library(Matrix)
library(ggplot2)
library(CellChat)
library(patchwork)
library(ggalluvial)
library(reticulate)
options(stringsAsFactors = FALSE)
### Read in data
ad <- import("anndata", convert = FALSE)
pd <- import("pandas", convert = FALSE)
ad_object <- ad$read_h5ad('/Users/carlos.lopez/INBOX/tb_circuits/cellchat_objects/CaiY_latentTB-PBMC_cellchat-ready.log.h5ad')
### Access expression matrix
data.input <- t(py_to_r(ad_object$X))
### Add metadata
rownames(data.input) <- rownames(py_to_r(ad_object$var))
colnames(data.input) <- rownames(py_to_r(ad_object$obs))
meta.data <- py_to_r(ad_object$obs)
meta <- meta.data
### Normalise data
#data.input <- normalizeData(data.input, scale.factor = 10000, do.log = TRUE)
### Create `cellchat` object
cellchat <- createCellChat(object = data.input, meta = meta, group.by = "cell_type")
### Set up ligand-receptor interaction database for `cellchat`
CellChatDB <- CellChatDB.human
showDatabaseCategory(CellChatDB)
dplyr::glimpse(CellChatDB$interaction)
CellChatDB.use <- CellChatDB
cellchat@DB <- CellChatDB.use
### Process expression data
cellchat <- subsetData(cellchat)
cellchat <- identifyOverExpressedGenes(cellchat)
cellchat <- identifyOverExpressedInteractions(cellchat)
cellchat <- projectData(cellchat, PPI.human)
cellchat <- computeCommunProb(cellchat, raw.use = TRUE)
cellchat <- filterCommunication(cellchat, min.cells = 3)
### Export results as dataframe
df.net <- subsetCommunication(cellchat)
head(df.net)
#write.table(df.net, sep = ',', row.names = FALSE, '/Users/carlostalavera-lopez/github/TB_cellular_circuits/5-cell_cell_interactions/results/CaiY_latentTB_PBMC_cellchat_net.csv')
### Infer cell-cell communication
cellchat <- computeCommunProbPathway(cellchat)
### Calculate aggregated cell-cell communication
cellchat <- aggregateNet(cellchat)
groupSize <- as.numeric(table(cellchat@idents))
par(mfrow = c(1,2), xpd = TRUE)
options(repr.plot.width = 40, repr.plot.height = 40)
netVisual_circle(cellchat@net$count, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Number of interactions")
netVisual_circle(cellchat@net$weight, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Interaction weights/strength")
mat <- cellchat@net$weight
par(mfrow = c(3,3), xpd=TRUE)
for (i in 1:nrow(mat)) {
mat2 <- matrix(0, nrow = nrow(mat), ncol = ncol(mat), dimnames = dimnames(mat))
mat2[i, ] <- mat[i, ]
netVisual_circle(mat2, vertex.weight = groupSize, weight.scale = T, edge.weight.max = max(mat), title.name = rownames(mat)[i])
}
unique(df.net$pathway_name)
options(repr.plot.width = 8, repr.plot.height = 10)
pathways.show <- c("ANNEXIN")
#pathways.show <- c("CXCL")
netAnalysis_contribution(cellchat, signaling = pathways.show)
vertex.receiver = seq(1,4) # a numeric vector.
netVisual_aggregate(cellchat, signaling = pathways.show,  vertex.receiver = vertex.receiver)
par(mfrow=c(1,1))
netVisual_aggregate(cellchat, signaling = pathways.show, layout = "circle")
netVisual_aggregate(cellchat, signaling = pathways.show, layout = "chord")
cellchat <- netAnalysis_computeCentrality(cellchat, slot.name = "netP")
options(repr.plot.width = 5, repr.plot.height = 5)
ht1 <- netAnalysis_signalingRole_heatmap(cellchat, pattern = "outgoing", width = 16, height = 20, color.heatmap = "YlGnBu")
ht2 <- netAnalysis_signalingRole_heatmap(cellchat, pattern = "incoming", width = 16, height = 20, color.heatmap = "YlGnBu")
ht1 + ht2
options(repr.plot.width = 10, repr.plot.height = 10)
gg1 <- netAnalysis_signalingRole_scatter(cellchat)
gg2 <- netAnalysis_signalingRole_scatter(cellchat, signaling = c("PARs", "MHC-I"))
gg1 + gg2
### Identify global communication patterns
selectK(cellchat, pattern = "outgoing")
options(repr.plot.width = 15, repr.plot.height = 15)
nPatterns = 5
cellchat <- identifyCommunicationPatterns(cellchat, pattern = "outgoing", k = nPatterns,  width = 10, height = 10)
### Identify global communication patterns
selectK(cellchat, pattern = "incoming")
options(repr.plot.width = 15, repr.plot.height = 15)
nPatterns = 5
cellchat <- identifyCommunicationPatterns(cellchat, pattern = "incoming", k = nPatterns,  width = 10, height = 10)
### Sankey plot for outgoing
options(repr.plot.width = 40, repr.plot.height = 22.5)
netAnalysis_river(cellchat, pattern = "outgoing", font.size = 2.5, font.size.title = 20)
netAnalysis_dot(cellchat, pattern = "outgoing")
pairLR.pathway <- extractEnrichedLR(cellchat, signaling = pathways.show, geneLR.return = FALSE)
LR.show <- pairLR.pathway[1,] # show one ligand-receptor pair
### Sankey plot for incoming
options(repr.plot.width = 40, repr.plot.height = 22.5)
netAnalysis_river(cellchat, pattern = "incoming", font.size = 2.5, font.size.title = 20)
netAnalysis_dot(cellchat, pattern = "incoming")
pairLR.pathway <- extractEnrichedLR(cellchat, signaling = pathways.show, geneLR.return = FALSE)
LR.show <- pairLR.pathway[1,] # show one ligand-receptor pair
options(repr.plot.width = 8, repr.plot.height = 10)
pathways.show <- c("ANNEXIN")
#pathways.show <- c("CXCL")
netAnalysis_contribution(cellchat, signaling = pathways.show)
vertex.receiver = seq(1,4) # a numeric vector.
netVisual_aggregate(cellchat, signaling = pathways.show,  vertex.receiver = vertex.receiver)
par(mfrow=c(1,1))
netVisual_aggregate(cellchat, signaling = pathways.show, layout = "circle")
netVisual_aggregate(cellchat, signaling = pathways.show, layout = "chord")
options(repr.plot.width = 8, repr.plot.height = 10)
pathways.show <- c("CLEC")
#pathways.show <- c("CXCL")
netAnalysis_contribution(cellchat, signaling = pathways.show)
vertex.receiver = seq(1,4) # a numeric vector.
netVisual_aggregate(cellchat, signaling = pathways.show,  vertex.receiver = vertex.receiver)
par(mfrow=c(1,1))
netVisual_aggregate(cellchat, signaling = pathways.show, layout = "circle")
netVisual_aggregate(cellchat, signaling = pathways.show, layout = "chord")
